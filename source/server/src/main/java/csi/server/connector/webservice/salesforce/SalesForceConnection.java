package csi.server.connector.webservice.salesforce;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.centrifuge.sf.SalesForce;

import csi.server.common.model.query.QueryParameterDef;

public class SalesForceConnection implements Connection {
   protected static final Logger LOG = LogManager.getLogger(SalesForceConnection.class);

   private String url;
    private Properties props;
    private SalesForce salesForce;

    public SalesForceConnection(String url, Properties props, SalesForce sf) {
        this.url = url;
        this.props = props;
        this.salesForce = sf;
    }

    void validate() {

    }

    /*
     * java.sql.Connection Methods
     */

    public void clearWarnings() throws SQLException {
    }

    public void close() throws SQLException {

    }

    public void commit() throws SQLException {

    }

    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {

        return null;
    }

    public Blob createBlob() throws SQLException {

        return null;
    }

    public Clob createClob() throws SQLException {

        return null;
    }

    public Statement createStatement() throws SQLException {

        return null;
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {

        return null;
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {

        return null;
    }

    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {

        return null;
    }


    public void setSchema(String schema) throws SQLException {

    }

    public String getSchema() throws SQLException {
        return null;
    }

    public void abort(Executor executor) throws SQLException {

    }

    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {

    }

    public int getNetworkTimeout() throws SQLException {
        return 0;
    }

    public boolean getAutoCommit() throws SQLException {

        return false;
    }

    public String getCatalog() throws SQLException {

        return null;
    }

    public Properties getClientInfo() throws SQLException {

        return null;
    }

    public String getClientInfo(String name) throws SQLException {

        return null;
    }

    public int getHoldability() throws SQLException {

        return 0;
    }

    public DatabaseMetaData getMetaData() throws SQLException {

        return null;
    }

    public int getTransactionIsolation() throws SQLException {

        return 0;
    }

    public Map<String, Class<?>> getTypeMap() throws SQLException {

        return null;
    }

    public SQLWarning getWarnings() throws SQLException {

        return null;
    }

    public boolean isClosed() throws SQLException {

        return false;
    }

    public boolean isReadOnly() throws SQLException {

        return false;
    }

    public boolean isValid(int timeout) throws SQLException {

        return false;
    }

    public String nativeSQL(String sql) throws SQLException {

        return null;
    }

    public CallableStatement prepareCall(String sql) throws SQLException {

        return null;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {

        return null;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {

        return null;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {

        return null;
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {

    }

    public void rollback() throws SQLException {

    }

    public void rollback(Savepoint savepoint) throws SQLException {

    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {

    }

    public void setCatalog(String catalog) throws SQLException {

    }

    public void setHoldability(int holdability) throws SQLException {

    }

    public void setReadOnly(boolean readOnly) throws SQLException {

    }

    public Savepoint setSavepoint() throws SQLException {

        return null;
    }

    public Savepoint setSavepoint(String name) throws SQLException {

        return null;
    }

    public void setTransactionIsolation(int level) throws SQLException {

    }

    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {

    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {

        return false;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {

        return null;
    }

    public ResultSet execute(String operationName, List<QueryParameterDef> params, String query) throws Throwable {

        Object[] records = salesForce.sendQuery(query);
        // Need to pass in the query so the SalesForceResultSet knows what fields were queried.
        SalesForceResultSet sfResultSet = new SalesForceResultSet(records, query);

        return sfResultSet;

    }

    @Override
    public NClob createNClob() throws SQLException {

        return null;
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {

        return null;
    }

    @Override
    public void setClientInfo(Properties arg0) throws SQLClientInfoException {

    }

    @Override
    public void setClientInfo(String arg0, String arg1) throws SQLClientInfoException {

    }

}