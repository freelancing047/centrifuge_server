/*
* @(#) TaskStatus.java,  23.03.2010
*
*/
package csi.server.task.api;

import com.google.gwt.core.shared.GwtIncompatible;
import com.google.gwt.user.client.rpc.IsSerializable;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/** Holds the Status of one Task.
 *
 * @author <a href="mailto:iulian.boanca@lpro.leverpointinc.com">Iulian Boanca</a>
 *
 */
public class TaskStatus implements IsSerializable {

    /** The status of the task [progress, canceled, finished] */
    private TaskStatusCode taskStatus;

    private String clientId;
    private String taskId;
    private String sessionId;

    /** Unhandled exception caught by the transport before returning to client */
    private Throwable exception;

    /** The resultData of the task [% of completion, result of task execution] */
    @GwtIncompatible
    private Object resultData;

    /** progress percentage */
    private int progress;

    /** progress label */
    private String progressLabel;

    /** map of arbitrary data to feedback to client while task is running */
    @GwtIncompatible
    private Map<String, Object> feedbackData = new HashMap<String, Object>();

    /** Error message generated by the task */
    private String errorMessage;

    /** The string representation of exception thrown by the task */
    private String errorDetail;

    /** warning messages that occurred while executing the tasks */
    private ArrayList<String> warnings = new ArrayList<String>();

    /** The Task creation time */
    private Date createdAt;

    /** The Task last-update time */
    private Date lastUpdate;

    /** If the task was update */
    private boolean updated;

    /** The pre-marshalled string representing the value of resultData */
    private String marshalledResult;

    public TaskStatus(String clientId, String taskId, String sessionId) {
        super();
        this.clientId = clientId;
        this.taskId = taskId;
        this.sessionId = sessionId;
        this.taskStatus = TaskStatusCode.TASK_STATUS_NEW;

    }

    public TaskStatus() {
    }

    public String getClientId() {
        return clientId;
    }

    public String getTaskId() {
        return taskId;
    }

    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    public String getSessionId() {
        return sessionId;
    }

    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }

    public TaskStatusCode getTaskStatus() {
        return taskStatus;
    }

    public void setTaskStatus(TaskStatusCode taskStatus) {
        this.taskStatus = taskStatus;
    }

    @GwtIncompatible
    public Object getResultData() {
        return resultData;
    }

    @GwtIncompatible
    public void setResultData(Object resultData) {
        this.resultData = resultData;
    }

    public int getProgress() {
        return progress;
    }

    public void setProgressData(int progress) {
        this.progress = progress;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    public String getErrorDetail() {
        return errorDetail;
    }

    public void setErrorDetail(String errorDetail) {
        this.errorDetail = errorDetail;
    }

    public ArrayList<String> getWarnings() {
        return warnings;
    }

    public void setWarnings(ArrayList<String> warnings) {
        this.warnings = warnings;
    }

    //    @JSON(include = false)
    public Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    //    @JSON(include = false)
    public Date getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public void setUpdated(boolean updated) {
        this.updated = updated;
    }

    //    @JSON(include = false)
    public boolean isUpdated() {
        return updated;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((taskId == null) ? 0 : taskId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final TaskStatus other = (TaskStatus) obj;
        if (taskId == null) {
            if (other.taskId != null) {
                return false;
            }
        } else if (!taskId.equals(other.taskId)) {
            return false;
        }
        return true;
    }

    public void setMarshalledResult(String marshalledResult) {
        this.marshalledResult = marshalledResult;
    }

    //    @JSON(include = false)
    public String getMarshalledResult() {
        return this.marshalledResult;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append("TaskStatus {");
        sb.append("\n clientId=").append(clientId);
        sb.append("\n, taskId=").append(taskId);
        sb.append("\n, status=").append(this.taskStatus);
        sb.append("\n, progressLabel=").append(this.progressLabel);
        sb.append("\n, progress=").append(this.progress);
        //        sb.append("\n, feedbackData=").append(this.feedbackData == null ? "null" : StringUtils.truncate(this.feedbackData.toString(), 100, true));
        if(feedbackData != null){
            int endIndex = 100;
            String feedback = feedbackData.toString();
            if (feedback.length() + 1 < endIndex) {
                endIndex = feedback.length() - 1;
            }
            sb.append("\n, feedbackData=" + feedback.substring(0, endIndex));
        } else {
        	sb.append("\n, feedbackData=null");
        }
        //        sb.append("\n, result=").append(StringUtils.truncate(this.marshalledResult, 100, true));
        if(marshalledResult != null){
            int endIndex = 100;
            if (marshalledResult.length() + 1 < endIndex) {
                endIndex = marshalledResult.length() - 1;
            }
            sb.append("\n, result=" + marshalledResult.substring(0, endIndex));
        } else {
        	sb.append("\n, result=null");
        }
        sb.append("\n}");
        return sb.toString();
    }

    public String getProgressLabel() {
        return progressLabel;
    }

    @GwtIncompatible
    public Map<String, Object> getFeedbackData() {
        return feedbackData;
    }

    public void setProgress(int progress) {
        this.progress = progress;
    }

    public void setProgressLabel(String progressLabel) {
        this.progressLabel = progressLabel;
    }

    @GwtIncompatible
    public void setFeedbackData(Map<String, Object> feedbackData) {
        this.feedbackData = feedbackData;
    }

    public Throwable getException() {
        return exception;
    }

    public void setException(Throwable exceptionIn) {
        exception = exceptionIn;
    }
}
