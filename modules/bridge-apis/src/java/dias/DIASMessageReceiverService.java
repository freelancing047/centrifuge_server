
package dias;

import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import dias.DIASMessageReceiver;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.4-hudson-208-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "DIASMessageReceiverService", targetNamespace = "urn:dias", wsdlLocation = "file:/META-INF/services/dias.wsdl")
public class DIASMessageReceiverService extends Service {
   private static final Logger LOG = Logger.getLogger(dias.DIASMessageReceiverService.class.getName());

    private final static URL DIASMESSAGERECEIVERSERVICE_WSDL_LOCATION;

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = dias.DIASMessageReceiverService.class.getClassLoader().getResource("META-INF/services/dias.wsdl");
//            url = new URL(baseUrl, "file:/META-INF/services/dias.wsdl");
            url = baseUrl;
        } catch (MalformedURLException e) {
            LOG.warning("Failed to create URL for the wsdl Location: 'file:/META-INF/services/dias.wsdl', retrying as a local file");
            LOG.warning(e.getMessage());
        }
        DIASMESSAGERECEIVERSERVICE_WSDL_LOCATION = url;
    }

    public DIASMessageReceiverService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DIASMessageReceiverService() {
        super(DIASMESSAGERECEIVERSERVICE_WSDL_LOCATION, new QName("urn:dias", "DIASMessageReceiverService"));
    }

    /**
     * 
     * @return
     *     returns DIASMessageReceiver
     */
    @WebEndpoint(name = "DIAS")
    public DIASMessageReceiver getDIAS() {
        return super.getPort(new QName("urn:dias", "DIAS"), DIASMessageReceiver.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DIASMessageReceiver
     */
    @WebEndpoint(name = "DIAS")
    public DIASMessageReceiver getDIAS(WebServiceFeature... features) {
        return super.getPort(new QName("urn:dias", "DIAS"), DIASMessageReceiver.class, features);
    }

}
